// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fence_module.proto

package config

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Fence struct {
	// service ports enable lazyload
	WormholePort []string `protobuf:"bytes,1,rep,name=wormholePort,proto3" json:"wormholePort,omitempty"`
	// whether enable ServiceFence auto generating
	// default value is false
	AutoFence bool `protobuf:"varint,2,opt,name=autoFence,proto3" json:"autoFence,omitempty"`
	// the namespace list which enable lazyload
	Namespace []string `protobuf:"bytes,3,rep,name=namespace,proto3" json:"namespace,omitempty"`
	// custom outside dispatch traffic rules
	Dispatches []*Dispatch `protobuf:"bytes,4,rep,name=dispatches,proto3" json:"dispatches,omitempty"`
	// can convert to one or many domain alias rules
	DomainAliases []*DomainAlias `protobuf:"bytes,5,rep,name=domainAliases,proto3" json:"domainAliases,omitempty"`
	// default behavior of create fence or not when autoFence is true
	// default value is false
	DefaultFence bool `protobuf:"varint,6,opt,name=defaultFence,proto3" json:"defaultFence,omitempty"`
	// whether enable http service port auto management
	// default value is false
	AutoPort bool `protobuf:"varint,7,opt,name=autoPort,proto3" json:"autoPort,omitempty"`
	// specify the ns of global-siecar, same as slimeNamespace by default
	ClusterGsNamespace string `protobuf:"bytes,8,opt,name=clusterGsNamespace,proto3" json:"clusterGsNamespace,omitempty"`
	// specify label key and alias to generate sf
	FenceLabelKeyAlias string `protobuf:"bytes,9,opt,name=fenceLabelKeyAlias,proto3" json:"fenceLabelKeyAlias,omitempty"`
	// enableShortDomain, it will generate fqdn and short domain if enabled, otherwise only fqdn is generated in svf and sidecar
	EnableShortDomain bool `protobuf:"varint,10,opt,name=enableShortDomain,proto3" json:"enableShortDomain,omitempty"`
	// disable ipv4 passthrough
	// mainly deal with compatibility issues with older versions of istio
	// if set true, all ipv4 request will route to global-sidecar
	// default is false, all ipv4 request will route to global-sidecar
	DisableIpv4Passthrough bool     `protobuf:"varint,11,opt,name=disableIpv4Passthrough,proto3" json:"disableIpv4Passthrough,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *Fence) Reset()         { *m = Fence{} }
func (m *Fence) String() string { return proto.CompactTextString(m) }
func (*Fence) ProtoMessage()    {}
func (*Fence) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eebc4b237a55c9b, []int{0}
}
func (m *Fence) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Fence.Unmarshal(m, b)
}
func (m *Fence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Fence.Marshal(b, m, deterministic)
}
func (m *Fence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fence.Merge(m, src)
}
func (m *Fence) XXX_Size() int {
	return xxx_messageInfo_Fence.Size(m)
}
func (m *Fence) XXX_DiscardUnknown() {
	xxx_messageInfo_Fence.DiscardUnknown(m)
}

var xxx_messageInfo_Fence proto.InternalMessageInfo

func (m *Fence) GetWormholePort() []string {
	if m != nil {
		return m.WormholePort
	}
	return nil
}

func (m *Fence) GetAutoFence() bool {
	if m != nil {
		return m.AutoFence
	}
	return false
}

func (m *Fence) GetNamespace() []string {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *Fence) GetDispatches() []*Dispatch {
	if m != nil {
		return m.Dispatches
	}
	return nil
}

func (m *Fence) GetDomainAliases() []*DomainAlias {
	if m != nil {
		return m.DomainAliases
	}
	return nil
}

func (m *Fence) GetDefaultFence() bool {
	if m != nil {
		return m.DefaultFence
	}
	return false
}

func (m *Fence) GetAutoPort() bool {
	if m != nil {
		return m.AutoPort
	}
	return false
}

func (m *Fence) GetClusterGsNamespace() string {
	if m != nil {
		return m.ClusterGsNamespace
	}
	return ""
}

func (m *Fence) GetFenceLabelKeyAlias() string {
	if m != nil {
		return m.FenceLabelKeyAlias
	}
	return ""
}

func (m *Fence) GetEnableShortDomain() bool {
	if m != nil {
		return m.EnableShortDomain
	}
	return false
}

func (m *Fence) GetDisableIpv4Passthrough() bool {
	if m != nil {
		return m.DisableIpv4Passthrough
	}
	return false
}

// The general idea is to assign different default traffic to different targets
// for correct processing by means of domain matching.
type Dispatch struct {
	// dispatch rule name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// domain matching contents
	Domains []string `protobuf:"bytes,2,rep,name=domains,proto3" json:"domains,omitempty"`
	// target cluster
	Cluster              string   `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dispatch) Reset()         { *m = Dispatch{} }
func (m *Dispatch) String() string { return proto.CompactTextString(m) }
func (*Dispatch) ProtoMessage()    {}
func (*Dispatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eebc4b237a55c9b, []int{1}
}
func (m *Dispatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dispatch.Unmarshal(m, b)
}
func (m *Dispatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dispatch.Marshal(b, m, deterministic)
}
func (m *Dispatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dispatch.Merge(m, src)
}
func (m *Dispatch) XXX_Size() int {
	return xxx_messageInfo_Dispatch.Size(m)
}
func (m *Dispatch) XXX_DiscardUnknown() {
	xxx_messageInfo_Dispatch.DiscardUnknown(m)
}

var xxx_messageInfo_Dispatch proto.InternalMessageInfo

func (m *Dispatch) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Dispatch) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *Dispatch) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

// DomainAlias regexp expression, which is alias for target domain
// default value is empty
// example:
// domainAliases:
//   - pattern: (?P<service>[^\.]+)\.(?P<namespace>[^\.]+)\.svc\.cluster\.local$
//     template:
//       - $namespace.$service.service.mailsaas
type DomainAlias struct {
	Pattern              string   `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Templates            []string `protobuf:"bytes,2,rep,name=templates,proto3" json:"templates,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DomainAlias) Reset()         { *m = DomainAlias{} }
func (m *DomainAlias) String() string { return proto.CompactTextString(m) }
func (*DomainAlias) ProtoMessage()    {}
func (*DomainAlias) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eebc4b237a55c9b, []int{2}
}
func (m *DomainAlias) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DomainAlias.Unmarshal(m, b)
}
func (m *DomainAlias) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DomainAlias.Marshal(b, m, deterministic)
}
func (m *DomainAlias) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainAlias.Merge(m, src)
}
func (m *DomainAlias) XXX_Size() int {
	return xxx_messageInfo_DomainAlias.Size(m)
}
func (m *DomainAlias) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainAlias.DiscardUnknown(m)
}

var xxx_messageInfo_DomainAlias proto.InternalMessageInfo

func (m *DomainAlias) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *DomainAlias) GetTemplates() []string {
	if m != nil {
		return m.Templates
	}
	return nil
}

func init() {
	proto.RegisterType((*Fence)(nil), "slime.microservice.lazyload.config.Fence")
	proto.RegisterType((*Dispatch)(nil), "slime.microservice.lazyload.config.Dispatch")
	proto.RegisterType((*DomainAlias)(nil), "slime.microservice.lazyload.config.DomainAlias")
}

func init() { proto.RegisterFile("fence_module.proto", fileDescriptor_8eebc4b237a55c9b) }

var fileDescriptor_8eebc4b237a55c9b = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4d, 0x8b, 0xd4, 0x40,
	0x10, 0x25, 0x9b, 0xd9, 0xdd, 0xa4, 0x46, 0x0f, 0xf6, 0x41, 0x1a, 0xf1, 0x10, 0x72, 0x0a, 0x32,
	0x24, 0xa0, 0xe2, 0x5d, 0xf1, 0x03, 0x71, 0x91, 0x25, 0xe2, 0xc5, 0x8b, 0xf4, 0x24, 0x35, 0x93,
	0x86, 0x4e, 0x3a, 0x74, 0x77, 0x46, 0xc6, 0x9f, 0xe1, 0x2f, 0x96, 0xae, 0x4c, 0x26, 0x33, 0x8c,
	0xa2, 0xb7, 0xd4, 0x7b, 0xf5, 0x8a, 0xaa, 0xf7, 0x3a, 0xc0, 0x36, 0xd8, 0x55, 0xf8, 0xbd, 0xd5,
	0xf5, 0xa0, 0x30, 0xef, 0x8d, 0x76, 0x9a, 0xa5, 0x56, 0xc9, 0x16, 0xf3, 0x56, 0x56, 0x46, 0x5b,
	0x34, 0x3b, 0x59, 0x61, 0xae, 0xc4, 0xcf, 0xbd, 0xd2, 0xa2, 0xce, 0x2b, 0xdd, 0x6d, 0xe4, 0x36,
	0xfd, 0xb5, 0x80, 0xeb, 0xf7, 0x5e, 0xca, 0x52, 0x78, 0xf0, 0x43, 0x9b, 0xb6, 0xd1, 0x0a, 0xef,
	0xb5, 0x71, 0x3c, 0x48, 0xc2, 0x2c, 0x2e, 0xcf, 0x30, 0xf6, 0x14, 0x62, 0x31, 0x38, 0x4d, 0x02,
	0x7e, 0x95, 0x04, 0x59, 0x54, 0xce, 0x80, 0x67, 0x3b, 0xd1, 0xa2, 0xed, 0x45, 0x85, 0x3c, 0x24,
	0xf9, 0x0c, 0xb0, 0x3b, 0x80, 0x5a, 0xda, 0x5e, 0xb8, 0xaa, 0x41, 0xcb, 0x17, 0x49, 0x98, 0x2d,
	0x9f, 0xaf, 0xf2, 0x7f, 0xaf, 0x98, 0xbf, 0x3d, 0xa8, 0xca, 0x13, 0x3d, 0xfb, 0x0a, 0x0f, 0x6b,
	0xdd, 0x0a, 0xd9, 0xbd, 0x56, 0x52, 0x58, 0xb4, 0xfc, 0x9a, 0x06, 0x16, 0xff, 0x35, 0x70, 0x16,
	0x96, 0xe7, 0x53, 0xbc, 0x09, 0x35, 0x6e, 0xc4, 0xa0, 0xdc, 0x78, 0xe3, 0x0d, 0xdd, 0x78, 0x86,
	0xb1, 0x27, 0x10, 0xf9, 0x9b, 0xc9, 0xa4, 0x5b, 0xe2, 0x8f, 0x35, 0xcb, 0x81, 0x55, 0x6a, 0xb0,
	0x0e, 0xcd, 0x07, 0xfb, 0xf9, 0xe8, 0x45, 0x94, 0x04, 0x59, 0x5c, 0xfe, 0x81, 0xf1, 0xfd, 0x14,
	0xdc, 0x9d, 0x58, 0xa3, 0xfa, 0x84, 0x7b, 0xda, 0x83, 0xc7, 0x63, 0xff, 0x25, 0xc3, 0x56, 0xf0,
	0x08, 0x3b, 0xb1, 0x56, 0xf8, 0xa5, 0xd1, 0xc6, 0x8d, 0x87, 0x70, 0xa0, 0x25, 0x2e, 0x09, 0xf6,
	0x0a, 0x1e, 0xd7, 0xd2, 0x7a, 0xf4, 0x63, 0xbf, 0x7b, 0x79, 0x2f, 0xac, 0x75, 0x8d, 0xd1, 0xc3,
	0xb6, 0xe1, 0x4b, 0x92, 0xfc, 0x85, 0x4d, 0x4b, 0x88, 0x26, 0xd3, 0x19, 0x83, 0x85, 0xcf, 0x90,
	0x07, 0xb4, 0x13, 0x7d, 0x33, 0x0e, 0xb7, 0xa3, 0x6d, 0x96, 0x5f, 0x51, 0xcc, 0x53, 0xe9, 0x99,
	0xc3, 0x95, 0x3c, 0x24, 0xc1, 0x54, 0xa6, 0xef, 0x60, 0x79, 0xe2, 0xbb, 0x6f, 0xec, 0x85, 0x73,
	0x68, 0xba, 0xc3, 0xe4, 0xa9, 0xf4, 0xaf, 0xc8, 0x61, 0xdb, 0x2b, 0xe1, 0x70, 0x1a, 0x3f, 0x03,
	0x6f, 0x56, 0xdf, 0x9e, 0x8d, 0x09, 0x4b, 0x5d, 0xd0, 0x47, 0x31, 0x3e, 0x79, 0x5b, 0x4c, 0x29,
	0x17, 0xa2, 0x97, 0xc5, 0x98, 0xf4, 0xfa, 0x86, 0x7e, 0x84, 0x17, 0xbf, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x01, 0x08, 0x7e, 0xad, 0x1e, 0x03, 0x00, 0x00,
}
