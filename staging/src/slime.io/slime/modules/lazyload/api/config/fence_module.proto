/*
* @Author: wangchenyu
* @Date: 2022/2/23
*/

syntax = "proto3";
package slime.microservice.lazyload.config;

option go_package = "slime.io/slime/modules/lazyload/api/config";

message Fence {
  // service ports enable lazyload
  repeated string wormholePort = 1;
  // whether enable ServiceFence auto generating
  // default value is false
  bool autoFence = 2;
  // the namespace list which enable lazyload
  repeated string namespace = 3;
  // custom outside dispatch traffic rules
  repeated Dispatch dispatches = 4;
  // can convert to one or many domain alias rules
  repeated DomainAlias domainAliases = 5;
  // default behavior of create fence or not when autoFence is true
  // default value is false
  bool defaultFence = 6;
  // whether enable http service port auto management
  // default value is false
  bool autoPort = 7;
  // specify the ns of global-siecar, same as slimeNamespace by default
  string clusterGsNamespace = 8;
  // specify label key and alias to generate sf
  string fenceLabelKeyAlias = 9;
  // enableShortDomain, it will generate fqdn and short domain if enabled, otherwise only fqdn is generated in svf and sidecar
  bool enableShortDomain = 10;
  // deprecated
  // disable ipv4 passthrough
  // mainly deal with compatibility issues with older versions of istio
  // if set true, all ipv4 request will route to global-sidecar
  // default is false, all ipv4 request will route to global-sidecar
  bool disableIpv4Passthrough = 11;
  // passthroughByDefault, if set true, all request will route to PassthroughCluster
  bool passthroughByDefault = 12;
  // grpc and http2 will be supported
  bool supportH2 = 13;
}

// The general idea is to assign different default traffic to different targets
// for correct processing by means of domain matching.
message Dispatch {
  // dispatch rule name
  string name = 1;
  // domain matching contents
  repeated string domains = 2;
  // target cluster
  string cluster = 3;
  // google re2 regex expression
  // forward matching request to the cluster
  string domainRegex = 4;
}

// DomainAlias regexp expression, which is alias for target domain
// default value is empty
// example:
// domainAliases:
//   - pattern: (?P<service>[^\.]+)\.(?P<namespace>[^\.]+)\.svc\.cluster\.local$
//     template:
//       - $namespace.$service.service.mailsaas
message DomainAlias {
  string pattern = 1;
  repeated string templates = 2;
}
